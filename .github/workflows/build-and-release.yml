name: "build-and-release"

on:
  # schedule:
  #   - cron: "0 10 * * *" # Every day at 10
  push:

jobs:
  ci:
    name: "Run tests"
    if: ${{ github.ref != 'refs/heads/main' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          "3.10",
          "3.11",
          "3.12",
        ]
        poetry-version: ["1.6.1"]
        os: [
          ubuntu-latest,
          macos-latest,
#          windows-latest, # Disabling Windows to get build working
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install dependencies
        run: poetry install --all-extras
      - name: Run tests
        run: poetry run pytest

  ci-no-coverage:
    name: "Run tests (no coverage)"
    if: ${{ github.ref != 'refs/heads/main' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [
#          "3.9", # Coverage is messed up for some reason
          "3.13", # Had to skip a test
        ]
        poetry-version: ["1.6.1"]
        os: [
          ubuntu-latest,
          macos-latest,
#          windows-latest, # Disabling Windows to get build working
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install dependencies
        run: poetry install --all-extras
      - name: Run tests
        run: poetry run pytest --no-cov
      
  code-coverage:
    name: "Code coverage"
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.6.1'
      - name: Install dependencies
        run: | 
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --all-extras
      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageCommand: poetry run pytest
          coverageLocations: ${{github.workspace}}/dist/coverage.info:lcov

  bump-version:
    name: "Bump minor version"
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: code-coverage
    runs-on: "ubuntu-latest"

    permissions: 
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Increment version
        uses: python-semantic-release/python-semantic-release@v9.20.0
        with:
          build: "false"
          # build_metadata: 
          changelog: "true"
          commit: "false"
          force: "patch"
          push: "true"
          tag: "true"
          vcs_release: "false"
          github_token: ${{ secrets.GITHUB_TOKEN }}
        
  tagged-release: # Publish new library version for tagged commits
    name: "Tagged release"
    if: ${{ github.ref == 'refs/heads/main' }}
    # if: ${{ startsWith( github.ref, 'refs/tags/' ) }}
    needs: bump-version
    runs-on: "ubuntu-latest"

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.6.1'
      - name: Install dependencies
        run: | 
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --all-extras
      - name: Build and publish package
        run: poetry publish --build --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
      - name: Create Github release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz
